var Classical;
(function (Classical) {
    var Html;
    (function (Html) {
        var spec;
        (function (spec) {
            //#region Imports
            var u = Classical.Utilities;
            var m = Classical.Html;
            var e = Classical.Html.Elements;
            var b = Classical.Binding;
            //#endregion Imports
            //#region Test Classes
            //#region TestElement
            var TestElement = (function () {
                //#endregion Properties
                //#region Constructors
                function TestElement(name, elementName, factoryMethod, properties) {
                    this._name = name;
                    this._elementName = elementName;
                    this._factoryMethod = factoryMethod;
                    this._properties = properties;
                }
                Object.defineProperty(TestElement.prototype, "name", {
                    //#endregion Fields
                    //#region Properties
                    get: function () {
                        return this._name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestElement.prototype, "elementName", {
                    get: function () {
                        return this._elementName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestElement.prototype, "factoryMethod", {
                    get: function () {
                        return this._factoryMethod;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestElement.prototype, "properties", {
                    get: function () {
                        return this._properties;
                    },
                    enumerable: true,
                    configurable: true
                });
                //#endregion Constructors
                //#region Methods
                TestElement.prototype.IsAutoGeneratedElement = function () {
                    return this.name !== 'HtmlElement' && this.name !== 'HtmlElementContainer';
                };
                return TestElement;
            })();
            //#endregion TestElement
            //#region TestProperty
            var TestProperty = (function () {
                //#endregion Properties
                //#region Constructors
                function TestProperty(propertyName, propertyElementName, factoryMethod, testItems, testCode, isInitializable, isIdl) {
                    this._propertyName = propertyName;
                    this._propertyElementName = propertyElementName;
                    this._type = factoryMethod;
                    this._testItems = testItems;
                    this._testCode = testCode;
                    this._isInitializable = isInitializable;
                    this._isIdl = isIdl;
                }
                Object.defineProperty(TestProperty.prototype, "propertyName", {
                    //#endregion Fields
                    //#region Properties
                    get: function () {
                        return this._propertyName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "propertyElementName", {
                    get: function () {
                        return this._propertyElementName;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "type", {
                    get: function () {
                        return this._type;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "testItems", {
                    get: function () {
                        return this._testItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "testCode", {
                    get: function () {
                        return this._testCode;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "isInitializable", {
                    get: function () {
                        return this._isInitializable;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TestProperty.prototype, "isIdl", {
                    get: function () {
                        return this._isIdl;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TestProperty;
            })();
            //#endregion TestProperty
            //#endregion Test Classes
            //#region Variables
            var testHtmlElement;
            var testHtmlElementContainer;
            var elements = new Array();
            //## ArrayInitialization
            //#endregion Variables
            describe('Classical', function () {
                describe('Html', function () {
                    //#region Factory Methods
                    elements.query().where(function (t) { return t.IsAutoGeneratedElement(); }).forEach(function (element) {
                        var factoryMethod = element.factoryMethod;
                        var elementName = element.name;
                        describe(factoryMethod, function () {
                            it('should return an instance of ' + elementName + '.', function () {
                                var element = m[factoryMethod]();
                                expect(element.getType()).toBe(typeOf(e[elementName]));
                            });
                            it('should not initialize the returned instance.', function () {
                                var element = m[factoryMethod]();
                                expect(element.isInitialized()).toBe(false);
                            });
                        });
                    });
                    //#endregion Factory Methods
                    //#region Elements
                    describe('Elements', function () {
                        //#region HtmlElement
                        describe('HtmlElement', function () {
                            it('should throw an error for an invalid property value.', function () {
                                var model = {
                                    property: new b.Property(0)
                                };
                                var audioElement = m.create(m.audio());
                                expect(function () { return audioElement.volume = 2; }).toThrow();
                                expect(audioElement.element['volume']).toBe(audioElement.volume);
                                audioElement = m.create(m.audio({
                                    volumeBinder: bind(model.property, function (p) { return p.value; })
                                }));
                                expect(function () { return model.property.value = 2; }).toThrow();
                                expect(audioElement.element['volume']).toBe(audioElement.volume);
                                expect(audioElement.element['volume']).toBe(model.property.value);
                                model = {
                                    property: new b.Property(10)
                                };
                                var inputElement = m.create(m.input({
                                    size: 10
                                }));
                                expect(function () { return inputElement.size = 0; }).toThrow();
                                expect(inputElement.size).toBe(10);
                                expect(inputElement.element['size']).toBe(inputElement.size);
                                inputElement = m.create(m.input({
                                    sizeBinder: bind(model.property, function (p) { return p.value; })
                                }));
                                expect(function () { return model.property.value = 0; }).toThrow();
                                expect(inputElement.size).toBe(10);
                                expect(inputElement.element['size']).toBe(inputElement.size);
                                expect(inputElement.element['size']).toBe(model.property.value);
                            });
                        });
                        //#endregion HtmlElement
                        //#region HtmlElementContainer
                        //#endregion HtmlElementContainer
                        //#region Concrete Elements
                        elements.query().where(function (t) { return !t.IsAutoGeneratedElement(); }).forEach(function (element) {
                            var name = element.name;
                            var elementName = element.elementName;
                            var factoryMethod = element.factoryMethod;
                            describe(name, function () {
                                element.properties.query().forEach(function (prop) {
                                    var propertyName = prop.propertyName;
                                    describe(propertyName, function () {
                                        it('should have the same value as the ' + propertyName + ' property in the config.', function () {
                                            elements.query().where(function (t) { return t.IsAutoGeneratedElement(); }).forEach(function (testElement) {
                                                var element;
                                                var factoryMethod = testElement.factoryMethod;
                                                var config = new Object();
                                                prop.testItems.query().forEach(function (testItem) {
                                                    config[propertyName] = testItem;
                                                    element = m.create(m[factoryMethod](config));
                                                    expect(element[propertyName]).toBe(testItem);
                                                });
                                            });
                                        });
                                        it('should have the same value as the ' + propertyName + 'Binder property in the config.', function () {
                                            elements.query().where(function (t) { return t.IsAutoGeneratedElement(); }).forEach(function (testElement) {
                                                var element;
                                                var factoryMethod = testElement.factoryMethod;
                                                var config = new Object();
                                                prop.testItems.query().forEach(function (testItem) {
                                                    config[propertyName + 'Binder'] = bind(testItem, function (t) { return t; });
                                                    element = m.create(m[factoryMethod](config));
                                                    expect(element[propertyName]).toBe(testItem);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                        elements.query().where(function (t) { return t.IsAutoGeneratedElement(); }).forEach(function (element) {
                            var name = element.name;
                            var elementName = element.elementName;
                            var factoryMethod = element.factoryMethod;
                            describe(name, function () {
                                //#region elementName
                                describe('elementName', function () {
                                    it('should be ' + elementName + '.', function () {
                                        var elementVariable = m.create(m[factoryMethod]());
                                        expect(elementVariable.elementName).toBe(elementName);
                                    });
                                    it('should equal the nodeName of the element returned by document.createElement.', function () {
                                        var elementVariable = m.create(m[factoryMethod]()), element = document.createElement(elementVariable.elementName);
                                        expect(elementVariable.elementName).toBe(element.nodeName.toLowerCase());
                                    });
                                });
                                //#endregion elementName
                                //#region createElement
                                describe('createElement', function () {
                                    it('should create an element.', function () {
                                        var elementVariable = m.create(m[factoryMethod]()), element = elementVariable.createElement(document);
                                        expect(u.isDefined(element)).toBe(true);
                                    });
                                    it('should create an element with a nodeName of ' + elementName + '.', function () {
                                        var elementVariable = m.create(m[factoryMethod]()), element = elementVariable.createElement(document);
                                        expect(element.nodeName.toLowerCase()).toBe(elementName);
                                    });
                                });
                                //#endregion createElement
                                //#region Properties
                                element.properties.query().forEach(function (prop) {
                                    var propertyName = prop.propertyName;
                                    var propertyElementName = prop.propertyElementName;
                                    var testCode = prop.testCode;
                                    describe(propertyName, function () {
                                        if (prop.isInitializable) {
                                            it('should have the same value as the ' + propertyName + ' property in the config.', function () {
                                                prop.testItems.query().forEach(function (testItem) {
                                                    var config = new Object();
                                                    config[propertyName] = testItem;
                                                    var element = m.create(m[factoryMethod](config));
                                                    if (testCode)
                                                        eval(testCode);
                                                    expect(element[propertyName]).toBe(testItem);
                                                    expect(element.element[propertyElementName]).toBe(testItem);
                                                });
                                            });
                                            it('should have the same value as the ' + propertyName + 'Binder property in the config.', function () {
                                                prop.testItems.query().forEach(function (testItem) {
                                                    var config = new Object();
                                                    config[propertyName + 'Binder'] = bind(testItem, function (t) { return t; });
                                                    var element = m.create(m[factoryMethod](config));
                                                    if (testCode)
                                                        eval(testCode);
                                                    expect(element[propertyName]).toBe(testItem);
                                                    expect(element.element[propertyElementName]).toBe(testItem);
                                                });
                                            });
                                        }
                                        it('should get and set the value of the ' + propertyName + ' property.', function () {
                                            var element = m.create(m[factoryMethod]());
                                            if (testCode)
                                                eval(testCode);
                                            prop.testItems.query().forEach(function (testItem) {
                                                element[propertyName] = testItem;
                                                expect(element[propertyName]).toBe(testItem);
                                            });
                                        });
                                        it('should bind to a model.', function () {
                                            var first, second, model, element;
                                            var testItems = prop.testItems;
                                            for (var i = 0; i < testItems.count(); i++) {
                                                var testItem = testItems[i];
                                                var nextItem = (i == (testItems.count() - 1)) ? testItems[0] : testItems[i + 1];
                                                first = testItem;
                                                second = nextItem;
                                                model = {
                                                    property: new b.Property(first)
                                                };
                                                element = m.create(m[factoryMethod]());
                                                if (testCode)
                                                    eval(testCode);
                                                var binder = bind(model.property, function (p) { return p.value; });
                                                binder.source = element[propertyName + 'Property'];
                                                model.property.value = second;
                                                expect(element[propertyName]).toBe(second);
                                                expect(element.element[propertyElementName]).toBe(second);
                                                model.property.value = first;
                                                element[propertyName] = second;
                                                expect(model.property.value).toBe(second);
                                                expect(element.element[propertyElementName]).toBe(second);
                                                model.property.value = first;
                                                if (!prop.isIdl) {
                                                    runs(function () {
                                                        element.element[propertyElementName] = second;
                                                    });
                                                    waitsFor(function () {
                                                        return model.property.value === second;
                                                    }, 'The model was not updated correctly from value "' + first + '" to value "' + second + '".', 20);
                                                    waitsFor(function () {
                                                        return element[propertyName] === second;
                                                    }, 'The decorator was not updated correctly from value "' + first + '" to value "' + second + '".', 20);
                                                }
                                            }
                                        });
                                    });
                                });
                                //#endregion Properties
                            });
                        });
                        //#endregion Concrete Elements
                    });
                    //#endregion Elements
                    //#region Events
                    describe('Events', function () {
                        //#region MouseEvents
                        describe('Click Event', function () {
                            it('Should change values of an object when the click event executes.', function () {
                                testClassicalEvent('clickEvent');
                            });
                            it('Should change values of an object when the click event is fired via the DOM.', function () {
                                testDomEvent('clickEvent', 'click');
                            });
                            it('Should change values of an object when the click event is added using addEventListener.', function () {
                                testAddEventListener('click');
                            });
                        });
                        describe('Double Click Event', function () {
                            it('Should change values of an object when the double click event executes.', function () {
                                testClassicalEvent('doubleClickEvent');
                            });
                            it('Should change values of an object when the double click event is fired via the DOM.', function () {
                                testDomEvent('doubleClickEvent', 'dblclick');
                            });
                            it('Should change values of an object when the double click event is added using addEventListener.', function () {
                                testAddEventListener('dblclick');
                            });
                        });
                        describe('Mouse Move Event', function () {
                            it('Should change values of an object when the mouse move event executes.', function () {
                                testClassicalEvent('mouseMoveEvent');
                            });
                            it('Should change values of an object when the mouse move is fired via the DOM.', function () {
                                testDomEvent('mouseMoveEvent', 'mousemove');
                            });
                            it('Should change values of an object when the mouse move event is added using addEventListener.', function () {
                                testAddEventListener('mousemove');
                            });
                        });
                        describe('Mouse Up Event', function () {
                            it('Should change values of an object when the mouse up event executes.', function () {
                                testClassicalEvent('mouseUpEvent');
                            });
                            it('Should change values of an object when the mouse up is fired via the DOM.', function () {
                                testDomEvent('mouseUpEvent', 'mouseup');
                            });
                            it('Should change values of an object when the mouse up event is added using addEventListener.', function () {
                                testAddEventListener('mouseup');
                            });
                        });
                        describe('Mouse Down Event', function () {
                            it('Should change values of an object when the mouse down event executes.', function () {
                                testClassicalEvent('mouseDownEvent');
                            });
                            it('Should change values of an object when the mouse down is fired via the DOM.', function () {
                                testDomEvent('mouseDownEvent', 'mousedown');
                            });
                            it('Should change values of an object when the mouse down event is added using addEventListener.', function () {
                                testAddEventListener('mousedown');
                            });
                        });
                        describe('Mouse Enter Event', function () {
                            it('Should change values of an object when the mouse enter event executes.', function () {
                                testClassicalEvent('mouseEnterEvent');
                            });
                            it('Should change values of an object when the mouse enter is fired via the DOM.', function () {
                                testDomEvent('mouseEnterEvent', 'mouseenter');
                            });
                            it('Should change values of an object when the mouse enter event is added using addEventListener.', function () {
                                testAddEventListener('mouseenter');
                            });
                        });
                        describe('Mouse Leave Event', function () {
                            it('Should change values of an object when the mouse leave event executes.', function () {
                                testClassicalEvent('mouseLeaveEvent');
                            });
                            it('Should change values of an object when the mouse leave is fired via the DOM.', function () {
                                testDomEvent('mouseLeaveEvent', 'mouseleave');
                            });
                            it('Should change values of an object when the mouse leave event is added using addEventListener.', function () {
                                testAddEventListener('mouseleave');
                            });
                        });
                        describe('Mouse Over Event', function () {
                            it('Should change values of an object when the mouse over event executes.', function () {
                                testClassicalEvent('mouseOverEvent');
                            });
                            it('Should change values of an object when the mouse over is fired via the DOM.', function () {
                                testDomEvent('mouseOverEvent', 'mouseover');
                            });
                            it('Should change values of an object when the mouse over event is added using addEventListener.', function () {
                                testAddEventListener('mouseover');
                            });
                        });
                        describe('Mouse Out Event', function () {
                            it('Should change values of an object when the mouse out event executes.', function () {
                                testClassicalEvent('mouseOutEvent');
                            });
                            it('Should change values of an object when the mouse out is fired via the DOM.', function () {
                                testDomEvent('mouseOutEvent', 'mouseout');
                            });
                            it('Should change values of an object when the mouse out event is added using addEventListener.', function () {
                                testAddEventListener('mouseout');
                            });
                        });
                        //#endregion MouseEvents
                        //#region KeyboardEvents
                        describe('Key Up Event', function () {
                            it('Should change values of an object when the key up event executes.', function () {
                                testClassicalEvent('keyUpEvent');
                            });
                            it('Should change values of an object when the key up event is fired via the DOM.', function () {
                                testDomEvent('keyUpEvent', 'keyup');
                            });
                            it('Should change values of an object when the key up event is added using addEventListener.', function () {
                                testAddEventListener('keyup');
                            });
                        });
                        describe('Key Down Event', function () {
                            it('Should change values of an object when the key down event executes.', function () {
                                testClassicalEvent('keyDownEvent');
                            });
                            it('Should change values of an object when the key down event is fired via the DOM.', function () {
                                testDomEvent('keyDownEvent', 'keydown');
                            });
                            it('Should change values of an object when the key down event is added using addEventListener.', function () {
                                testAddEventListener('keydown');
                            });
                        });
                        describe('Key Press Event', function () {
                            it('Should change values of an object when the key press event executes.', function () {
                                testClassicalEvent('keyPressEvent');
                            });
                            it('Should change values of an object when the key press event is fired via the DOM.', function () {
                                testDomEvent('keyPressEvent', 'keypress');
                            });
                            it('Should change values of an object when the key press event is added using addEventListener.', function () {
                                testAddEventListener('keypress');
                            });
                        });
                        //#endregion KeyboardEvents
                        describe('Focus Event', function () {
                            it('Should change values of an object when the focus event executes.', function () {
                                testClassicalEvent('focusEvent');
                            });
                            it('Should change values of an object when the focus event is fired via the DOM.', function () {
                                testDomEvent('focusEvent', 'focus');
                            });
                            it('Should change values of an object when the focus event is added using addEventListener.', function () {
                                testAddEventListener('focus');
                            });
                        });
                        describe('Blur Event', function () {
                            it('Should change values of an object when the blur event executes.', function () {
                                testClassicalEvent('blurEvent');
                            });
                            it('Should change values of an object when the blur event is fired via the DOM.', function () {
                                testDomEvent('blurEvent', 'blur');
                            });
                            it('Should change values of an object when the blur event is added using addEventListener.', function () {
                                testAddEventListener('blur');
                            });
                        });
                        describe('Copy Event', function () {
                            it('Should change values of an object when the copy event executes.', function () {
                                testClassicalEvent('copyEvent');
                            });
                            it('Should change values of an object when the copy event is fired via the DOM.', function () {
                                testDomEvent('copyEvent', 'copy');
                            });
                            it('Should change values of an object when the copy event is added using addEventListener.', function () {
                                testAddEventListener('copy');
                            });
                        });
                        describe('Cut Event', function () {
                            it('Should change values of an object when the cut event executes.', function () {
                                testClassicalEvent('cutEvent');
                            });
                            it('Should change values of an object when the cut event is fired via the DOM.', function () {
                                testDomEvent('cutEvent', 'cut');
                            });
                            it('Should change values of an object when the cut event is added using addEventListener.', function () {
                                testAddEventListener('cut');
                            });
                        });
                        describe('Paste Event', function () {
                            it('Should change values of an object when the paste event executes.', function () {
                                testClassicalEvent('pasteEvent');
                            });
                            it('Should change values of an object when the paste event is fired via the DOM.', function () {
                                testDomEvent('pasteEvent', 'paste');
                            });
                            it('Should change values of an object when the paste event is added using addEventListener.', function () {
                                testAddEventListener('paste');
                            });
                        });
                        describe('Scroll Event', function () {
                            it('Should change values of an object when the scroll event executes.', function () {
                                testClassicalEvent('scrollEvent');
                            });
                            it('Should change values of an object when the scroll event is fired via the DOM.', function () {
                                testDomEvent('scrollEvent', 'scroll');
                            });
                            it('Should change values of an object when the scroll event is added using addEventListener.', function () {
                                testAddEventListener('scroll');
                            });
                        });
                        describe('Resize Event', function () {
                            it('Should change values of an object when the resize event executes.', function () {
                                testClassicalEvent('resizeEvent');
                            });
                            it('Should change values of an object when the resize event is fired via the DOM.', function () {
                                testDomEvent('resizeEvent', 'resize');
                            });
                            it('Should change values of an object when the resize event is added using addEventListener.', function () {
                                testAddEventListener('resize');
                            });
                        });
                    });
                    //#region testClassicalEvent
                    function testClassicalEvent(eventPropertyName) {
                        var testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        var divisionElement = m.div();
                        divisionElement = m.create(divisionElement);
                        divisionElement.scrollEvent;
                        var firstTestFunction = function (node, info) { testObject.firstValue = 1; };
                        divisionElement[eventPropertyName].subscribe(firstTestFunction);
                        divisionElement[eventPropertyName].subscribe(function (node, info) { testObject.secondValue = 2; });
                        divisionElement[eventPropertyName].subscribe(function (node, info) { testObject.thirdValue = 3; });
                        divisionElement[eventPropertyName].execute(null);
                        expect(testObject.firstValue).toBe(1);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                        testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        divisionElement[eventPropertyName].unsubscribe(firstTestFunction);
                        divisionElement[eventPropertyName].execute(null);
                        expect(testObject.firstValue).toBe(0);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                    }
                    //#endregion testClassicalEvent
                    //#region testDomEvent
                    function testDomEvent(eventPropertyName, eventType) {
                        var divisionId = 'divisionElementTest';
                        var testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        var divisionConfig = {
                            id: divisionId,
                        };
                        var divisionElement = m.div(divisionConfig);
                        divisionElement = m.create(divisionElement);
                        document.body.appendChild(divisionElement.element);
                        var firstTestFunction = function (node, info) { testObject.firstValue = 1; };
                        divisionElement[eventPropertyName].subscribe(firstTestFunction);
                        divisionElement[eventPropertyName].subscribe(function (node, info) { testObject.secondValue = 2; });
                        divisionElement[eventPropertyName].subscribe(function (node, info) { testObject.thirdValue = 3; });
                        var event = document.createEvent('Event');
                        event.initEvent(eventType, true, true);
                        document.getElementById(divisionId).dispatchEvent(event);
                        expect(testObject.firstValue).toBe(1);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                        testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        divisionElement[eventPropertyName].unsubscribe(firstTestFunction);
                        document.getElementById(divisionId).dispatchEvent(event);
                        expect(testObject.firstValue).toBe(0);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                        document.body.removeChild(divisionElement.element);
                    }
                    //#endregion testDomEvent
                    //#region testAddEventListener
                    function testAddEventListener(eventName) {
                        var divisionId = 'divisionElementTest';
                        var testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        var divisionConfig = {
                            id: divisionId,
                        };
                        var divisionElement = m.div(divisionConfig);
                        divisionElement = m.create(divisionElement);
                        document.body.appendChild(divisionElement.element);
                        var firstTestFunction = function (e) { testObject.firstValue = 1; };
                        divisionElement.element.addEventListener(eventName, firstTestFunction);
                        divisionElement.element.addEventListener(eventName, function (e) { testObject.secondValue = 2; });
                        divisionElement.element.addEventListener(eventName, function (e) { testObject.thirdValue = 3; });
                        var event = document.createEvent('Event');
                        event.initEvent(eventName, true, true);
                        document.getElementById(divisionId).dispatchEvent(event);
                        expect(testObject.firstValue).toBe(1);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                        testObject = {
                            firstValue: 0,
                            secondValue: 0,
                            thirdValue: 0
                        };
                        divisionElement.element.removeEventListener(eventName, firstTestFunction);
                        document.getElementById(divisionId).dispatchEvent(event);
                        expect(testObject.firstValue).toBe(0);
                        expect(testObject.secondValue).toBe(2);
                        expect(testObject.thirdValue).toBe(3);
                        document.body.removeChild(divisionElement.element);
                    }
                    //#endregion testAddEventListener
                    //#endregion Events
                });
            });
        })(spec = Html.spec || (Html.spec = {}));
    })(Html = Classical.Html || (Classical.Html = {}));
})(Classical || (Classical = {}));
//# sourceMappingURL=HtmlTemplate.spec.js.map